{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { postService } from '../services/api';\nexport default {\n  name: 'PostList',\n  data() {\n    return {\n      posts: [],\n      loading: true\n    };\n  },\n  async mounted() {\n    await this.fetchPosts();\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        this.loading = true;\n        const response = await postService.getAllPosts();\n        this.posts = response.data;\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    goToDetail(id) {\n      this.$router.push(`/post/${id}`);\n    },\n    goToCreate() {\n      this.$router.push('/create');\n    },\n    truncateContent(content) {\n      return content.length > 150 ? content.substring(0, 150) + '...' : content;\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n  }\n};","map":{"version":3,"names":["postService","name","data","posts","loading","mounted","fetchPosts","methods","response","getAllPosts","error","console","goToDetail","id","$router","push","goToCreate","truncateContent","content","length","substring","formatDate","dateString","date","Date","toLocaleDateString","year","month","day"],"sources":["/home/ec2-user/test/frontend/src/views/PostList.vue"],"sourcesContent":["<template>\n  <div class=\"post-list\">\n    <div class=\"container\">\n      <div class=\"header\">\n        <h1>Blog Posts</h1>\n        <button @click=\"goToCreate\" class=\"btn-create\">Write New Post</button>\n      </div>\n      \n      <div v-if=\"loading\" class=\"loading\">Loading...</div>\n      \n      <div v-else-if=\"posts.length === 0\" class=\"no-posts\">\n        No posts available. Create your first post!\n      </div>\n      \n      <div v-else class=\"posts-grid\">\n        <div \n          v-for=\"post in posts\" \n          :key=\"post.id\" \n          class=\"post-card\"\n          @click=\"goToDetail(post.id)\"\n        >\n          <h3 class=\"post-title\">{{ post.title }}</h3>\n          <p class=\"post-content\">{{ truncateContent(post.content) }}</p>\n          <div class=\"post-meta\">\n            <span class=\"post-date\">{{ formatDate(post.createdDate) }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { postService } from '../services/api'\n\nexport default {\n  name: 'PostList',\n  data() {\n    return {\n      posts: [],\n      loading: true\n    }\n  },\n  async mounted() {\n    await this.fetchPosts()\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        this.loading = true\n        const response = await postService.getAllPosts()\n        this.posts = response.data\n      } catch (error) {\n        console.error('Error fetching posts:', error)\n      } finally {\n        this.loading = false\n      }\n    },\n    goToDetail(id) {\n      this.$router.push(`/post/${id}`)\n    },\n    goToCreate() {\n      this.$router.push('/create')\n    },\n    truncateContent(content) {\n      return content.length > 150 ? content.substring(0, 150) + '...' : content\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString)\n      return date.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n}\n\n.header h1 {\n  color: #2c3e50;\n  margin: 0;\n}\n\n.btn-create {\n  background-color: #3498db;\n  color: white;\n  border: none;\n  padding: 12px 24px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: background-color 0.3s;\n}\n\n.btn-create:hover {\n  background-color: #2980b9;\n}\n\n.loading {\n  text-align: center;\n  padding: 50px 0;\n  font-size: 18px;\n  color: #7f8c8d;\n}\n\n.no-posts {\n  text-align: center;\n  padding: 50px 0;\n  font-size: 18px;\n  color: #7f8c8d;\n}\n\n.posts-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n}\n\n.post-card {\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.post-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n}\n\n.post-title {\n  margin: 0 0 10px 0;\n  color: #2c3e50;\n  font-size: 1.4rem;\n  line-height: 1.3;\n}\n\n.post-content {\n  color: #7f8c8d;\n  line-height: 1.5;\n  margin: 0 0 15px 0;\n}\n\n.post-meta {\n  border-top: 1px solid #ecf0f1;\n  padding-top: 10px;\n}\n\n.post-date {\n  color: #95a5a6;\n  font-size: 0.9rem;\n}\n</style>"],"mappings":";AAiCA,SAASA,WAAU,QAAS,iBAAgB;AAE5C,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACX;EACF,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,UAAU,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,IAAI,CAACF,OAAM,GAAI,IAAG;QAClB,MAAMI,QAAO,GAAI,MAAMR,WAAW,CAACS,WAAW,CAAC;QAC/C,IAAI,CAACN,KAAI,GAAIK,QAAQ,CAACN,IAAG;MAC3B,EAAE,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK;MAC9C,UAAU;QACR,IAAI,CAACN,OAAM,GAAI,KAAI;MACrB;IACF,CAAC;IACDQ,UAAUA,CAACC,EAAE,EAAE;MACb,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,SAASF,EAAE,EAAE;IACjC,CAAC;IACDG,UAAUA,CAAA,EAAG;MACX,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC,SAAS;IAC7B,CAAC;IACDE,eAAeA,CAACC,OAAO,EAAE;MACvB,OAAOA,OAAO,CAACC,MAAK,GAAI,GAAE,GAAID,OAAO,CAACE,SAAS,CAAC,CAAC,EAAE,GAAG,IAAI,KAAI,GAAIF,OAAM;IAC1E,CAAC;IACDG,UAAUA,CAACC,UAAU,EAAE;MACrB,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,UAAU;MAChC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;QACtCC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,MAAM;QACbC,GAAG,EAAE;MACP,CAAC;IACH;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
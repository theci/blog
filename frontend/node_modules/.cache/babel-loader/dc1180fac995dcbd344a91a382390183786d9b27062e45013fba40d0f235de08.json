{"ast":null,"code":"export default {\n  name: 'CommentSection',\n  props: {\n    postId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  emits: ['comments-updated'],\n  data() {\n    return {\n      comments: [],\n      loading: false,\n      submitting: false,\n      updating: false,\n      newComment: {\n        author: '',\n        content: ''\n      },\n      editingComment: null\n    };\n  },\n  async mounted() {\n    await this.fetchComments();\n  },\n  methods: {\n    async fetchComments() {\n      try {\n        this.loading = true;\n        const response = await this.$commentService.getCommentsByPostId(this.postId);\n        this.comments = response.data;\n        this.$emit('comments-updated', this.comments.length);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async submitComment() {\n      if (!this.newComment.author.trim() || !this.newComment.content.trim()) {\n        alert('Please fill in both name and comment.');\n        return;\n      }\n      try {\n        this.submitting = true;\n        await this.$commentService.createComment(this.postId, {\n          author: this.newComment.author.trim(),\n          content: this.newComment.content.trim()\n        });\n        this.newComment.author = '';\n        this.newComment.content = '';\n        await this.fetchComments();\n      } catch (error) {\n        console.error('Error creating comment:', error);\n        alert('Failed to post comment. Please try again.');\n      } finally {\n        this.submitting = false;\n      }\n    },\n    startEdit(comment) {\n      this.editingComment = {\n        id: comment.id,\n        author: comment.author,\n        content: comment.content\n      };\n    },\n    cancelEdit() {\n      this.editingComment = null;\n    },\n    async updateComment() {\n      if (!this.editingComment.author.trim() || !this.editingComment.content.trim()) {\n        alert('Please fill in both name and comment.');\n        return;\n      }\n      try {\n        this.updating = true;\n        await this.$commentService.updateComment(this.editingComment.id, {\n          author: this.editingComment.author.trim(),\n          content: this.editingComment.content.trim()\n        });\n        this.editingComment = null;\n        await this.fetchComments();\n      } catch (error) {\n        console.error('Error updating comment:', error);\n        alert('Failed to update comment. Please try again.');\n      } finally {\n        this.updating = false;\n      }\n    },\n    async deleteComment(commentId) {\n      if (!confirm('Are you sure you want to delete this comment?')) {\n        return;\n      }\n      try {\n        await this.$commentService.deleteComment(commentId);\n        await this.fetchComments();\n      } catch (error) {\n        console.error('Error deleting comment:', error);\n        alert('Failed to delete comment. Please try again.');\n      }\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  },\n  watch: {\n    postId() {\n      this.fetchComments();\n    }\n  }\n};","map":{"version":3,"names":["name","props","postId","type","String","Number","required","emits","data","comments","loading","submitting","updating","newComment","author","content","editingComment","mounted","fetchComments","methods","response","$commentService","getCommentsByPostId","$emit","length","error","console","submitComment","trim","alert","createComment","startEdit","comment","id","cancelEdit","updateComment","deleteComment","commentId","confirm","formatDate","dateString","date","Date","toLocaleDateString","year","month","day","hour","minute","watch"],"sources":["/home/ec2-user/test/frontend/src/components/CommentSection.vue"],"sourcesContent":["<template>\n  <div class=\"comment-section\">\n    <div class=\"comment-header\">\n      <h3>Comments ({{ comments.length }})</h3>\n    </div>\n    \n    <div class=\"comment-form\">\n      <form @submit.prevent=\"submitComment\">\n        <div class=\"form-row\">\n          <input\n            v-model=\"newComment.author\"\n            type=\"text\"\n            placeholder=\"Your name\"\n            class=\"author-input\"\n            required\n          />\n        </div>\n        <div class=\"form-row\">\n          <textarea\n            v-model=\"newComment.content\"\n            placeholder=\"Write your comment...\"\n            class=\"comment-textarea\"\n            rows=\"3\"\n            required\n          ></textarea>\n        </div>\n        <div class=\"form-actions\">\n          <button type=\"submit\" class=\"submit-btn\" :disabled=\"submitting\">\n            {{ submitting ? 'Posting...' : 'Post Comment' }}\n          </button>\n        </div>\n      </form>\n    </div>\n    \n    <div class=\"comments-list\">\n      <div v-if=\"loading\" class=\"loading\">Loading comments...</div>\n      \n      <div v-else-if=\"comments.length === 0\" class=\"no-comments\">\n        No comments yet. Be the first to comment!\n      </div>\n      \n      <div v-else>\n        <div \n          v-for=\"comment in comments\" \n          :key=\"comment.id\" \n          class=\"comment-item\"\n        >\n          <div class=\"comment-header-info\">\n            <span class=\"comment-author\">{{ comment.author }}</span>\n            <span class=\"comment-date\">{{ formatDate(comment.createdDate) }}</span>\n            <span v-if=\"comment.modifiedDate !== comment.createdDate\" class=\"comment-edited\">\n              (edited)\n            </span>\n          </div>\n          \n          <div class=\"comment-content\">\n            {{ comment.content }}\n          </div>\n          \n          <div class=\"comment-actions\">\n            <button \n              @click=\"startEdit(comment)\" \n              class=\"edit-btn\"\n              v-if=\"!editingComment || editingComment.id !== comment.id\"\n            >\n              Edit\n            </button>\n            <button \n              @click=\"deleteComment(comment.id)\" \n              class=\"delete-btn\"\n              v-if=\"!editingComment || editingComment.id !== comment.id\"\n            >\n              Delete\n            </button>\n          </div>\n          \n          <div v-if=\"editingComment && editingComment.id === comment.id\" class=\"edit-form\">\n            <form @submit.prevent=\"updateComment\">\n              <div class=\"form-row\">\n                <input\n                  v-model=\"editingComment.author\"\n                  type=\"text\"\n                  placeholder=\"Your name\"\n                  class=\"author-input\"\n                  required\n                />\n              </div>\n              <div class=\"form-row\">\n                <textarea\n                  v-model=\"editingComment.content\"\n                  placeholder=\"Edit your comment...\"\n                  class=\"comment-textarea\"\n                  rows=\"3\"\n                  required\n                ></textarea>\n              </div>\n              <div class=\"form-actions\">\n                <button type=\"button\" @click=\"cancelEdit\" class=\"cancel-btn\">Cancel</button>\n                <button type=\"submit\" class=\"submit-btn\" :disabled=\"updating\">\n                  {{ updating ? 'Updating...' : 'Update' }}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'CommentSection',\n  props: {\n    postId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  emits: ['comments-updated'],\n  data() {\n    return {\n      comments: [],\n      loading: false,\n      submitting: false,\n      updating: false,\n      newComment: {\n        author: '',\n        content: ''\n      },\n      editingComment: null\n    }\n  },\n  async mounted() {\n    await this.fetchComments()\n  },\n  methods: {\n    async fetchComments() {\n      try {\n        this.loading = true\n        const response = await this.$commentService.getCommentsByPostId(this.postId)\n        this.comments = response.data\n        this.$emit('comments-updated', this.comments.length)\n      } catch (error) {\n        console.error('Error fetching comments:', error)\n      } finally {\n        this.loading = false\n      }\n    },\n    \n    async submitComment() {\n      if (!this.newComment.author.trim() || !this.newComment.content.trim()) {\n        alert('Please fill in both name and comment.')\n        return\n      }\n      \n      try {\n        this.submitting = true\n        await this.$commentService.createComment(this.postId, {\n          author: this.newComment.author.trim(),\n          content: this.newComment.content.trim()\n        })\n        \n        this.newComment.author = ''\n        this.newComment.content = ''\n        await this.fetchComments()\n      } catch (error) {\n        console.error('Error creating comment:', error)\n        alert('Failed to post comment. Please try again.')\n      } finally {\n        this.submitting = false\n      }\n    },\n    \n    startEdit(comment) {\n      this.editingComment = {\n        id: comment.id,\n        author: comment.author,\n        content: comment.content\n      }\n    },\n    \n    cancelEdit() {\n      this.editingComment = null\n    },\n    \n    async updateComment() {\n      if (!this.editingComment.author.trim() || !this.editingComment.content.trim()) {\n        alert('Please fill in both name and comment.')\n        return\n      }\n      \n      try {\n        this.updating = true\n        await this.$commentService.updateComment(this.editingComment.id, {\n          author: this.editingComment.author.trim(),\n          content: this.editingComment.content.trim()\n        })\n        \n        this.editingComment = null\n        await this.fetchComments()\n      } catch (error) {\n        console.error('Error updating comment:', error)\n        alert('Failed to update comment. Please try again.')\n      } finally {\n        this.updating = false\n      }\n    },\n    \n    async deleteComment(commentId) {\n      if (!confirm('Are you sure you want to delete this comment?')) {\n        return\n      }\n      \n      try {\n        await this.$commentService.deleteComment(commentId)\n        await this.fetchComments()\n      } catch (error) {\n        console.error('Error deleting comment:', error)\n        alert('Failed to delete comment. Please try again.')\n      }\n    },\n    \n    formatDate(dateString) {\n      const date = new Date(dateString)\n      return date.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    }\n  },\n  watch: {\n    postId() {\n      this.fetchComments()\n    }\n  }\n}\n</script>\n\n<style scoped>\n.comment-section {\n  margin-top: 40px;\n  padding-top: 30px;\n  border-top: 2px solid #ecf0f1;\n}\n\n.comment-header h3 {\n  color: #2c3e50;\n  margin: 0 0 25px 0;\n  font-size: 1.5rem;\n}\n\n.comment-form {\n  background-color: #f8f9fa;\n  padding: 25px;\n  border-radius: 8px;\n  margin-bottom: 30px;\n}\n\n.form-row {\n  margin-bottom: 15px;\n}\n\n.author-input {\n  width: 100%;\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  box-sizing: border-box;\n}\n\n.comment-textarea {\n  width: 100%;\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  font-family: inherit;\n  resize: vertical;\n  box-sizing: border-box;\n}\n\n.author-input:focus,\n.comment-textarea:focus {\n  outline: none;\n  border-color: #3498db;\n}\n\n.form-actions {\n  text-align: right;\n}\n\n.submit-btn {\n  background-color: #3498db;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:hover:not(:disabled) {\n  background-color: #2980b9;\n}\n\n.submit-btn:disabled {\n  background-color: #bdc3c7;\n  cursor: not-allowed;\n}\n\n.cancel-btn {\n  background-color: #95a5a6;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  margin-right: 10px;\n  transition: background-color 0.3s;\n}\n\n.cancel-btn:hover {\n  background-color: #7f8c8d;\n}\n\n.loading {\n  text-align: center;\n  padding: 30px;\n  color: #7f8c8d;\n}\n\n.no-comments {\n  text-align: center;\n  padding: 30px;\n  color: #7f8c8d;\n  font-style: italic;\n}\n\n.comment-item {\n  background-color: white;\n  border: 1px solid #ecf0f1;\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 15px;\n  transition: box-shadow 0.3s;\n}\n\n.comment-item:hover {\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.comment-header-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  gap: 10px;\n}\n\n.comment-author {\n  font-weight: 600;\n  color: #2c3e50;\n}\n\n.comment-date {\n  font-size: 0.9rem;\n  color: #7f8c8d;\n}\n\n.comment-edited {\n  font-size: 0.8rem;\n  color: #95a5a6;\n  font-style: italic;\n}\n\n.comment-content {\n  color: #2c3e50;\n  line-height: 1.6;\n  margin-bottom: 15px;\n  white-space: pre-wrap;\n}\n\n.comment-actions {\n  display: flex;\n  gap: 10px;\n}\n\n.edit-btn,\n.delete-btn {\n  background: none;\n  border: none;\n  color: #3498db;\n  cursor: pointer;\n  font-size: 0.9rem;\n  padding: 5px 10px;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n}\n\n.edit-btn:hover {\n  background-color: #e8f4fd;\n}\n\n.delete-btn {\n  color: #e74c3c;\n}\n\n.delete-btn:hover {\n  background-color: #fdf2f2;\n}\n\n.edit-form {\n  margin-top: 15px;\n  padding-top: 15px;\n  border-top: 1px solid #ecf0f1;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
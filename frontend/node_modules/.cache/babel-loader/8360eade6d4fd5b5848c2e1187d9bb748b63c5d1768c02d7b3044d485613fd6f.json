{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport axios from 'axios';\nconst API_BASE_URL = '/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const postService = {\n  getAllPosts() {\n    return api.get('/posts');\n  },\n  getPostById(id) {\n    return api.get(`/posts/${id}`);\n  },\n  createPost(post) {\n    return api.post('/posts', post);\n  },\n  updatePost(id, post) {\n    return api.put(`/posts/${id}`, post);\n  },\n  deletePost(id) {\n    return api.delete(`/posts/${id}`);\n  }\n};\nexport const fileService = {\n  uploadFiles(postId, files) {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n    return axios.post(`${API_BASE_URL}/files/upload/${postId}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  }\n};\nexport const commentService = {\n  getCommentsByPostId(postId) {\n    return api.get(`/comments/post/${postId}`);\n  },\n  createComment(postId, comment) {\n    return api.post(`/comments/post/${postId}`, comment);\n  },\n  updateComment(commentId, comment) {\n    return api.put(`/comments/${commentId}`, comment);\n  },\n  deleteComment(commentId) {\n    return api.delete(`/comments/${commentId}`);\n  },\n  getCommentCount(postId) {\n    return api.get(`/comments/post/${postId}/count`);\n  }\n};\nexport const authService = {\n  register(userData) {\n    return api.post('/auth/register', userData);\n  },\n  login(credentials) {\n    return api.post('/auth/login', credentials);\n  },\n  logout() {\n    return api.post('/auth/logout');\n  },\n  getCurrentUser() {\n    return api.get('/auth/me');\n  }\n};\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => response, error => {\n  if (error.response?.status === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","postService","getAllPosts","get","getPostById","id","createPost","post","updatePost","put","deletePost","delete","fileService","uploadFiles","postId","files","formData","FormData","forEach","file","append","commentService","getCommentsByPostId","createComment","comment","updateComment","commentId","deleteComment","getCommentCount","authService","register","userData","login","credentials","logout","getCurrentUser","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href"],"sources":["/home/ec2-user/test/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios'\n\nconst API_BASE_URL = '/api'\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n\nexport const postService = {\n  getAllPosts() {\n    return api.get('/posts')\n  },\n  \n  getPostById(id) {\n    return api.get(`/posts/${id}`)\n  },\n  \n  createPost(post) {\n    return api.post('/posts', post)\n  },\n  \n  updatePost(id, post) {\n    return api.put(`/posts/${id}`, post)\n  },\n  \n  deletePost(id) {\n    return api.delete(`/posts/${id}`)\n  }\n}\n\nexport const fileService = {\n  uploadFiles(postId, files) {\n    const formData = new FormData()\n    files.forEach(file => {\n      formData.append('files', file)\n    })\n    \n    return axios.post(`${API_BASE_URL}/files/upload/${postId}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      }\n    })\n  }\n}\n\nexport const commentService = {\n  getCommentsByPostId(postId) {\n    return api.get(`/comments/post/${postId}`)\n  },\n  \n  createComment(postId, comment) {\n    return api.post(`/comments/post/${postId}`, comment)\n  },\n  \n  updateComment(commentId, comment) {\n    return api.put(`/comments/${commentId}`, comment)\n  },\n  \n  deleteComment(commentId) {\n    return api.delete(`/comments/${commentId}`)\n  },\n  \n  getCommentCount(postId) {\n    return api.get(`/comments/post/${postId}/count`)\n  }\n}\n\nexport const authService = {\n  register(userData) {\n    return api.post('/auth/register', userData)\n  },\n  \n  login(credentials) {\n    return api.post('/auth/login', credentials)\n  },\n  \n  logout() {\n    return api.post('/auth/logout')\n  },\n  \n  getCurrentUser() {\n    return api.get('/auth/me')\n  }\n}\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token')\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  }\n)\n\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token')\n      localStorage.removeItem('user')\n      window.location.href = '/login'\n    }\n    return Promise.reject(error)\n  }\n)\n\nexport default api"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,MAAM;AAE3B,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG;EACzBC,WAAWA,CAAA,EAAG;IACZ,OAAOL,GAAG,CAACM,GAAG,CAAC,QAAQ,CAAC;EAC1B,CAAC;EAEDC,WAAWA,CAACC,EAAE,EAAE;IACd,OAAOR,GAAG,CAACM,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;EAChC,CAAC;EAEDC,UAAUA,CAACC,IAAI,EAAE;IACf,OAAOV,GAAG,CAACU,IAAI,CAAC,QAAQ,EAAEA,IAAI,CAAC;EACjC,CAAC;EAEDC,UAAUA,CAACH,EAAE,EAAEE,IAAI,EAAE;IACnB,OAAOV,GAAG,CAACY,GAAG,CAAC,UAAUJ,EAAE,EAAE,EAAEE,IAAI,CAAC;EACtC,CAAC;EAEDG,UAAUA,CAACL,EAAE,EAAE;IACb,OAAOR,GAAG,CAACc,MAAM,CAAC,UAAUN,EAAE,EAAE,CAAC;EACnC;AACF,CAAC;AAED,OAAO,MAAMO,WAAW,GAAG;EACzBC,WAAWA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACzB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BF,KAAK,CAACG,OAAO,CAACC,IAAI,IAAI;MACpBH,QAAQ,CAACI,MAAM,CAAC,OAAO,EAAED,IAAI,CAAC;IAChC,CAAC,CAAC;IAEF,OAAOxB,KAAK,CAACY,IAAI,CAAC,GAAGX,YAAY,iBAAiBkB,MAAM,EAAE,EAAEE,QAAQ,EAAE;MACpEhB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMqB,cAAc,GAAG;EAC5BC,mBAAmBA,CAACR,MAAM,EAAE;IAC1B,OAAOjB,GAAG,CAACM,GAAG,CAAC,kBAAkBW,MAAM,EAAE,CAAC;EAC5C,CAAC;EAEDS,aAAaA,CAACT,MAAM,EAAEU,OAAO,EAAE;IAC7B,OAAO3B,GAAG,CAACU,IAAI,CAAC,kBAAkBO,MAAM,EAAE,EAAEU,OAAO,CAAC;EACtD,CAAC;EAEDC,aAAaA,CAACC,SAAS,EAAEF,OAAO,EAAE;IAChC,OAAO3B,GAAG,CAACY,GAAG,CAAC,aAAaiB,SAAS,EAAE,EAAEF,OAAO,CAAC;EACnD,CAAC;EAEDG,aAAaA,CAACD,SAAS,EAAE;IACvB,OAAO7B,GAAG,CAACc,MAAM,CAAC,aAAae,SAAS,EAAE,CAAC;EAC7C,CAAC;EAEDE,eAAeA,CAACd,MAAM,EAAE;IACtB,OAAOjB,GAAG,CAACM,GAAG,CAAC,kBAAkBW,MAAM,QAAQ,CAAC;EAClD;AACF,CAAC;AAED,OAAO,MAAMe,WAAW,GAAG;EACzBC,QAAQA,CAACC,QAAQ,EAAE;IACjB,OAAOlC,GAAG,CAACU,IAAI,CAAC,gBAAgB,EAAEwB,QAAQ,CAAC;EAC7C,CAAC;EAEDC,KAAKA,CAACC,WAAW,EAAE;IACjB,OAAOpC,GAAG,CAACU,IAAI,CAAC,aAAa,EAAE0B,WAAW,CAAC;EAC7C,CAAC;EAEDC,MAAMA,CAAA,EAAG;IACP,OAAOrC,GAAG,CAACU,IAAI,CAAC,cAAc,CAAC;EACjC,CAAC;EAED4B,cAAcA,CAAA,EAAG;IACf,OAAOtC,GAAG,CAACM,GAAG,CAAC,UAAU,CAAC;EAC5B;AACF,CAAC;AAEDN,GAAG,CAACuC,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACvC,OAAO,CAAC2C,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED/C,GAAG,CAACuC,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAEC,MAAM,KAAK,GAAG,EAAE;IAClCP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAe/C,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}